import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import java.io.*;
import java.net.URL;

import javax.sound.sampled.*;
import javax.swing.*;

public class Game extends JFrame implements ActionListener, KeyListener {

	//The map of the level
	static Skin[][] map;
	static int maplength=6;
	static int mapwidth=6;

	Skin player, box;

	Rectangle Screen;
	Graphics buffer;
	BufferedImage background;

	int nbChar=0;
	boolean didWin, didEnd, movePlayer, moveBox;
	int ctEnd;

	boolean toucheLeft;
	boolean toucheRight;
	boolean toucheEspace;
	boolean toucheDown;
	boolean toucheUp;

	int level;

	//Timer:
	int Timer_ms = 50;
	Timer Mytimer;
	boolean movingUp, movingDown, movingLeft, movingRight;

	int sx,sy,dx,dy;
	int bsx,bsy,bdx,bdy;
	int bi,bj;
	int counter=0;
	int bcounter=0;


	public Game(){
		//Windows settings
		this.setLayout(null);
		this.setResizable(false);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setBounds(20,20,600,725);
		setTitle("Treasure Hunting go go~~");
		this.getContentPane().setBackground(Color.blue);

		Screen = new Rectangle(0,0,getSize().width,getSize().height);

		//Moving box init
		box = new Box();

		//Start of the game init
		didWin=false;
		didEnd=false;
		level=1;

		//map filling
		map = new Skin[maplength][mapwidth];
		readCsv();

		/**Get buffered image background*/
		background = new BufferedImage(Screen.width, Screen.height, BufferedImage.TYPE_INT_RGB);
		buffer = background.getGraphics();

		//Timer start
		Mytimer = new Timer(Timer_ms, this);
		Mytimer.start();

		//Key Listener 
		addKeyListener(this);

		//showing the window
		this.setVisible(true);
	}

	public void readCsv (){
		//the csv file, initiation of the csv reader
		String csvFile="levels/level"+level+".csv";
		BufferedReader br = null;
		String line = "";
		String cvsSplitBy = ";";
		int j=0;

		//read the csv files and fill the array map[][], create the player
		try {
			br = new BufferedReader(new FileReader(csvFile));
			while ((line = br.readLine()) != null) {
				String[] what = line.split(cvsSplitBy);
				for(int i=0; i<mapwidth;i++){
					switch(what[i]){
					case "0":	map[j][i]=new Box();
					map[j][i].x= 100*i;
					map[j][i].y= 100*j;
					break;

					case "1":	if (nbChar==0){
						nbChar++;
						player=new Character();
						player.x= 100*i;
						player.y= 100*j;
					}
					map[j][i]=new Skin();
					map[j][i].x= 100*i;
					map[j][i].y= 100*j;	 						
					break;

					case "3":	map[j][i]=new  Unmoveable(1);
					map[j][i].x= 100*i;
					map[j][i].y= 100*j;
					break;
					case "4":	map[j][i]=new  Unmoveable(2);
					map[j][i].x= 100*i;
					map[j][i].y= 100*j;
					break;

					default: map[j][i]=new Skin();
					map[j][i].x= 100*i;
					map[j][i].y= 100*j;
					}
				}
				j++;
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}

	public void paint(Graphics g){


		Toolkit T = Toolkit.getDefaultToolkit();

		//draw the background of the window
		buffer.setColor(Color.cyan);
		buffer.fillRect(0, 0, 600, 725);

		//if the player didn't win
		if(!didWin){
			//draw the map, grass and boxes
			for(int i=0; i<maplength; i++){
				for(int j=0; j<mapwidth; j++){

					if(bcounter == 10 && moveBox){
						map[bi][bj] = new Box();
						map[bi][bj].x = bj*100;
						map[bi][bj].y = bi*100;
					}

					buffer.drawImage(map[i][j].image, map[i][j].x, map[i][j].y, this);

					//draw stars where the player should put the boxes
					if(level==1 && ((i==1&&j==2)||(i==3&&j==1))){
						Image treasure= T.getImage("pictures/star.gif");
						buffer.drawImage(treasure, map[i][j].x+(map[i][j].image.getWidth(this))/2-(treasure.getWidth(this))/2, map[i][j].y+(map[i][j].image.getHeight(this))/2-(treasure.getHeight(this))/2, this);
					}
					else if(level==2 && ((i==2&&j==4)||(i==2&&j==3)||(i==3&&j==3))){
						Image treasure= T.getImage("pictures/star.gif");
						buffer.drawImage(treasure, map[i][j].x+(map[i][j].image.getWidth(this))/2-(treasure.getWidth(this))/2, map[i][j].y+(map[i][j].image.getHeight(this))/2-(treasure.getHeight(this))/2, this);
					}
					else if(level==3 && ((i==2&&j==4)||(i==4&&j==2)||(i==4&&j==4))){
						Image treasure= T.getImage("pictures/star.gif");
						buffer.drawImage(treasure, map[i][j].x+(map[i][j].image.getWidth(this))/2-(treasure.getWidth(this))/2, map[i][j].y+(map[i][j].image.getHeight(this))/2-(treasure.getHeight(this))/2, this);
					}
					else if(level==4 && ((i==4&&j==2)||(i==4&&j==4))){
						Image treasure= T.getImage("pictures/star.gif");
						buffer.drawImage(treasure, map[i][j].x+(map[i][j].image.getWidth(this))/2-(treasure.getWidth(this))/2, map[i][j].y+(map[i][j].image.getHeight(this))/2-(treasure.getHeight(this))/2, this);
					}
					else if(level==5 && ((i==3&&j==4)||(i==2&&j==4))){
						Image treasure= T.getImage("pictures/star.gif");
						buffer.drawImage(treasure, map[i][j].x+(map[i][j].image.getWidth(this))/2-(treasure.getWidth(this))/2, map[i][j].y+(map[i][j].image.getHeight(this))/2-(treasure.getHeight(this))/2, this);
					}
				}
			}

			//draw the player
			if(movePlayer){
				++counter;
				if(counter==1){
					dy=sy;
					dx=sx;
					if(movingUp){
						dy=dy-10;
						player.image = T.getImage("pictures/Avatar"+Character.CharNb+"_back.gif");
					}else if(movingDown){
						dy = dy+10;
						player.image = T.getImage("pictures/Avatar"+Character.CharNb+"_front.gif");
					}else if(movingLeft){
						dx = dx-10;
						player.image = T.getImage("pictures/Avatar"+Character.CharNb+"_left.gif");
					}else if(movingRight){
						dx = dx+10;
						player.image = T.getImage("pictures/Avatar"+Character.CharNb+"_right.gif");
					}
					player.x = dx;
					player.y = dy;
				}else if(counter<=10){
					if(movingUp){
						dy=dy-10;
					}else if(movingDown){
						dy = dy+10;
					}else if(movingLeft){
						dx = dx-10;
					}else if(movingRight){
						dx = dx+10;
					}

					player.x = dx;
					player.y = dy;

				}
			}
			buffer.drawImage(player.image, player.x, player.y,100,100, this);

			//draw the moving box if it is moving
			if(moveBox){
				++bcounter;
				if(bcounter==1){
					bdy=bsy;
					bdx=bsx;
					if(movingUp){
						bdy=bdy-10;
					}else if(movingDown){
						bdy = bdy+10;
					}else if(movingLeft){
						bdx = bdx-10;
					}else if(movingRight){
						bdx = bdx+10;
					}
					box.x = bdx;
					box.y = bdy;
				}else if(bcounter<=10){
					if(movingUp){
						bdy=bdy-10;

					}else if(movingDown){
						bdy = bdy+10;

					}else if(movingLeft){
						bdx = bdx-10;

					}else if(movingRight){
						bdx = bdx+10;

					}
					box.x = bdx;
					box.y = bdy;

				}

				buffer.drawImage(box.image,box.x,box.y,this);
			}

			//stop the animation
			if(counter ==11 || bcounter ==15){
				movingUp = false;
				movingDown = false;
				movingLeft = false;
				movingRight = false;
				movePlayer = false;
				moveBox = false;
				counter = 0;
				bcounter =0;

				player.image = T.getImage("pictures/Avatar"+Character.CharNb+".png");
			}
		}

		//if end of the game, give the player his treasure
		if(didEnd){
			Image image = T.getImage("pictures/win.jpg");
			buffer.drawImage(image,0,0,600,300,this);
			image = T.getImage("pictures/win2.png");
			buffer.drawImage(image,0,300,300,300,this);
			image = T.getImage("pictures/win3.jpg");
			buffer.drawImage(image,300,300,300,300,this);

		}	

		//if end of the level, take away the boxes and open the door for the player
		else if(didWin){
			for(int i=0; i<maplength; i++){
				for(int j=0; j<mapwidth; j++){

					buffer.drawImage(map[i][j].image, map[i][j].x, map[i][j].y, this);

					//eliminatioon of the boxes
					if(level==1 && ((i==1&&j==2)||(i==3&&j==1))){
						Image treasure= T.getImage("pictures/hole.gif");
						buffer.drawImage(treasure, map[i][j].x, map[i][j].y,100,100, this);
					}
					else if(level==2 && ((i==2&&j==4)||(i==2&&j==3)||(i==3&&j==3))){
						Image treasure= T.getImage("pictures/hole.gif");
						buffer.drawImage(treasure, map[i][j].x, map[i][j].y,100,100, this);
					}
					else if(level==3 && ((i==2&&j==4)||(i==4&&j==2)||(i==4&&j==4))){
						Image treasure= T.getImage("pictures/hole.gif");
						buffer.drawImage(treasure,map[i][j].x, map[i][j].y,100,100, this);
					}
					else if(level==4 && ((i==4&&j==2)||(i==4&&j==4))){
						Image treasure= T.getImage("pictures/hole.gif");
						buffer.drawImage(treasure, map[i][j].x, map[i][j].y,100,100, this);
					}
					else if(level==5 && ((i==3&&j==4)||(i==2&&j==4))){
						Image treasure= T.getImage("pictures/hole.gif");
						buffer.drawImage(treasure, map[i][j].x, map[i][j].y,100,100, this);
					}
				}
			}

			//opening door
			Image image = T.getImage("pictures/door.gif");
			if(level==5) image=T.getImage("pictures/TreasureChest.jpg");
			buffer.drawImage(image,300,300,100,100,this);

			//player drawing
			if(movePlayer){
				++counter;
				if(counter==1){
					dy=sy;
					dx=sx;
					if(movingUp){
						dy=dy-10;
						player.image = T.getImage("pictures/Avatar"+Character.CharNb+"_back.gif");
					}else if(movingDown){
						dy = dy+10;
						player.image = T.getImage("pictures/Avatar"+Character.CharNb+"_front.gif");
					}else if(movingLeft){
						dx = dx-10;
						player.image = T.getImage("pictures/Avatar"+Character.CharNb+"_left.gif");
					}else if(movingRight){
						dx = dx+10;
						player.image = T.getImage("pictures/Avatar"+Character.CharNb+"_right.gif");
					}
					player.x = dx;
					player.y = dy;
				}else if(counter<=10){
					if(movingUp){
						dy=dy-10;
					}else if(movingDown){
						dy = dy+10;
					}else if(movingLeft){
						dx = dx-10;
					}else if(movingRight){
						dx = dx+10;
					}

					player.x = dx;
					player.y = dy;

				}

				//end of animation
				if(counter ==11 || bcounter ==15){
					movingUp = false;
					movingDown = false;
					movingLeft = false;
					movingRight = false;
					movePlayer = false;
					moveBox = false;
					counter = 0;
					bcounter =0;
					player.image = T.getImage("pictures/Avatar"+Character.CharNb+".png");
				}
			}
			buffer.drawImage(player.image, player.x, player.y,100,100, this);
		}

		//draw the bottom of the window, give some interresting key, current state of the game and cheering for the player !
		buffer.setColor(Color.black);
		buffer.setFont(new Font("Sawasdee",Font.LAYOUT_LEFT_TO_RIGHT,20));
		if(!didEnd) buffer.drawString(Character.username+" in room "+level+". Still "+(5-level)+" to get to your treasure !", 10, 630);
		buffer.drawString("Space to restart  -  Esc to exit  -   H to go back to menu",60,660);
		if (level==1) buffer.drawString("It's only the beginning !", 300, 690);
		if (level==2) buffer.drawString("One step closer !", 300, 690);
		if (level==3) buffer.drawString("Half way !", 300, 690);
		if (level==4) buffer.drawString("It's time to give up, your journey was great !", 100, 690);
		if (level==5&&!didEnd) buffer.drawString("Wow you're still here ? It good to have determination !", 100, 690);
		buffer.setFont(new Font("Sawasdee",Font.LAYOUT_LEFT_TO_RIGHT,10));
		buffer.drawString("If bug press space", 10, 690);
		buffer.setColor(Color.red);
		buffer.setFont(new Font("Sawasdee",Font.LAYOUT_LEFT_TO_RIGHT,40));
		if(didEnd) { buffer.drawString("Congratulations "+Character.username+" !!!",10,640);
		buffer.drawImage(player.image, 300,670,20,20, this);}


		//draw everything
		g.drawImage(background,0,25,this);
	}

	@Override
	public void keyPressed(KeyEvent e) {

		//when the player press a direction, its boolean became true
		if(e.getKeyCode()==KeyEvent.VK_LEFT){
			toucheLeft=true;
		}
		else if(e.getKeyCode()==KeyEvent.VK_UP){
			toucheUp=true;
		}
		else if(e.getKeyCode()==KeyEvent.VK_DOWN){
			toucheDown=true;
		}
		else if(e.getKeyCode()==KeyEvent.VK_RIGHT){
			toucheRight=true;
		}

		//run away from the game
		if(e.getKeyCode()==KeyEvent.VK_ESCAPE){
			System.exit(0);
		}

		//restart the level where you're struck (of a big use if the player has weird coordinates, just restart and magic it's ok !)
		if(e.getKeyCode()==KeyEvent.VK_SPACE){
			restartLevel();
		}

		//go back to menu, maybe have a look at the instructions, change player..
		if(e.getKeyCode()==KeyEvent.VK_H){
			Menu goba=new Menu();
			goba.setVisible(true);
			this.setVisible(false);
		}

		//cheat keys, use with moderations
		if(e.getKeyCode()==KeyEvent.VK_R&&level!=1){
			level-=2;;
			gotonextlevel();
		}
		if(e.getKeyCode()==KeyEvent.VK_W){
			gotonextlevel();
		}
		if(e.getKeyCode()==KeyEvent.VK_M){
			if (level==5) didEnd=true;
			else didWin=true;
		}
	}

	public void restartLevel(){
		nbChar=0;
		readCsv();
	}

	public void simulate (){

		gestionPlayer(Screen);

		//check if the player have won -> if the boxes are well organized
		if(level==1 && map[1][2].isObstacle && map[3][1].isObstacle) {
			didWin=true;
		}
		else if(level==2 && map[2][4].isObstacle && map[2][3].isObstacle && map[3][3].isObstacle){
			didWin=true;
		}
		else if(level==3 && map[2][4].isObstacle && map[4][2].isObstacle && map[4][4].isObstacle){
			didWin=true;
		}
		else if(level==4 && map[4][2].isObstacle && map[4][4].isObstacle){
			didWin=true;
		}
		else if(level==5 && map[3][4].isObstacle && map[2][4].isObstacle){
			didWin=true;
		}

		//change level if the player entered the door
		if(didWin&&player.x==300&&player.y==300) {
			gotonextlevel();
		}
	}

	public void gotonextlevel(){
		//reset boolean and draw the next level
		if (level==5) didEnd=true;
		else{level++;
		didWin=false;
		nbChar=0;
		readCsv();}
		repaint();
	}

	@Override
	public void keyReleased(KeyEvent e) {

		//set the direction boolean to false if the key is released
		if(e.getKeyCode()==KeyEvent.VK_LEFT){
			toucheLeft=false;
		}
		if(e.getKeyCode()==KeyEvent.VK_RIGHT){
			toucheRight=false;
		}
		if(e.getKeyCode()==KeyEvent.VK_UP){
			toucheUp=false;
		}
		if(e.getKeyCode()==KeyEvent.VK_DOWN){
			toucheDown=false;
		}
	}

	@Override
	public void keyTyped(KeyEvent e) {

	}

	@Override
	public void actionPerformed(ActionEvent e) {
		//if something happen, update the game
		simulate();
		repaint();

		//if the end, ask if the player want to find the treasure again, or run away with what he already have
		if (didEnd){
			Timer timer = new Timer(1000, new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					ctEnd++;
					if(ctEnd==3){
						if (JOptionPane.showConfirmDialog(null, "Do you want to play again ?", "", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
							Menu returnPage = new Menu();
							returnPage.setVisible(true);
							setVisible(false);
							((Timer)e.getSource()).stop();
						} else {
							System.exit(0);
						}
					}
				}
			});
			this.setVisible(true);
			timer.start();}

	}

	public void gestionPlayer(Rectangle Screen){
		Toolkit T = Toolkit.getDefaultToolkit();

		//take the current coordinates of the player
		int i= player.y/100;
		int j=player.x/100;

		if(counter == 0){
			//when the player touch the up key or is moving up (for animation)
			if(toucheUp || movingUp){
				//check the condition for the player to move (nothing upward)
				if((i!=0 && !(map[i-1][j].isObstacle))|| (didWin&&(i!=0 && !(map[i-1][j].isObstacle)))){
					this.movingUp = true;
					movePlayer = true;
					sx = player.x;
					sy = player.y;

				}
				//can the player push the box ? he can only push one at a time, and if there is no wall
				if((i%6!=1 && i%6!=0 && map[i-1][j] instanceof Box)&&(!(map[i-2][j].isObstacle))) {

					movingUp = true;
					moveBox = true;
					bsx = map[i-1][j].x;
					bsy = map[i-1][j].y;
					bi = i-2;
					bj = j;



					map[i-1][j] = new Skin();
					map[i-1][j].x = (j)*100;
					map[i-1][j].y = (i-1)*100;

				}	
			}

			//if you read the one for up, it's the same for the others 3
			else if(toucheDown || movingDown){
				if((i!=5 && !(map[i+1][j].isObstacle)) || (didWin&&(i!=5 && !(map[i+1][j].isObstacle)))){
					this.movingDown = true;
					movePlayer = true;
					sx = player.x;
					sy = player.y;
				}
				if((i%6!=4 && i%6!=5 && map[i+1][j] instanceof Box)&&(!(map[i+2][j].isObstacle))) {

					movingDown = true;
					moveBox = true;
					bsx = map[i+1][j].x;
					bsy = map[i+1][j].y;
					bi = i+2;
					bj = j;

					map[i+1][j] = new Skin();
					map[i+1][j].x = (j)*100;
					map[i+1][j].y = (i+1)*100;

				}
			}

			else if(toucheLeft || movingLeft){
				if((j!=0 && !(map[i][j-1].isObstacle)) || (didWin&&(j!=0 && !(map[i][j-1].isObstacle)))){
					this.movingLeft = true;
					movePlayer = true;
					sx = player.x;
					sy = player.y;
				}
				if((j%6!=0 && j%6!=1 && map[i][j-1] instanceof Box) && (!(map[i][j-2].isObstacle))) {

					movingLeft = true;
					moveBox = true;
					bsx = map[i][j-1].x;
					bsy = map[i][j-1].y;
					bi = i;
					bj = j-2;

					map[i][j-1] = new Skin();
					map[i][j-1].x = (j-1)*100;
					map[i][j-1].y = (i)*100;

				}
			}

			else if(toucheRight || movingRight){
				if((j!=5 && !(map[i][j+1].isObstacle)) || (didWin&&(j!=5 && !(map[i][j+1].isObstacle)))){
					movingRight = true;
					movePlayer = true;
					sx = player.x;
					sy = player.y;
				}
				if((j%6!=4 && j%6!=5 && map[i][j+1] instanceof Box) && (!(map[i][j+2].isObstacle))) {

					movingRight = true;
					moveBox = true;
					bsx = map[i][j+1].x;
					bsy = map[i][j+1].y;
					bi = i;
					bj = j+2;

					map[i][j+1] = new Skin();
					map[i][j+1].x = (j+1)*100;
					map[i][j+1].y = (i)*100;

				}
			}	
		}
	}

}


